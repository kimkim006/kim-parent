<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kim.quality.business.dao.AppealDao">

	<sql id="selectColumn">
		t.id as id,
		t.task_id as taskId,
		t.inspector as inspector,
		t.appealer as appealer,
		DATE_FORMAT(t.appeal_time,'%Y-%m-%d %H:%i:%s') as appealTime,
		t.content as content,
		t.is_last as isLast,
		t.status as status,
		t.tenant_id as tenantId,
		t.atv_flag as atvFlag,
		DATE_FORMAT(t.oper_time,'%Y-%m-%d %H:%i:%s') as operTime,
		t.oper_user as operUser,
		t.oper_name as operName,
		t.remark as remark
	</sql>
	
	<select id="listKey" parameterType="com.kim.quality.business.vo.AppealVo"
		resultType="com.kim.quality.business.entity.AppealEntity">
		select 
			t.id as id,
			DATE_FORMAT(t.appeal_time,'%Y-%m-%d %H:%i:%s') as appealTime
		from icm_qt_appeal as t
		where t.task_id = #{taskId}
		AND t.tenant_id = #{tenantId}
		AND t.atv_flag = 1
	</select>
	
	<select id="list" parameterType="com.kim.quality.business.vo.AppealVo"
		resultType="com.kim.quality.business.entity.AppealEntity">
		select 
			<include refid="selectColumn"/>
		from icm_qt_appeal as t
		<where>
			<include refid="queryCondition"/>
		</where>
	</select>
		
	<sql id="queryCondition">
        <if test="obj.id != null">
            AND t.id = #{obj.id}
        </if>
        <if test="obj.taskId != null and obj.taskId != ''">
            AND t.task_id = #{obj.taskId}
        </if>
        <if test="obj.inspector != null and obj.inspector != ''">
            AND t.inspector = #{obj.inspector}
        </if>
        <if test="obj.appealer != null and obj.appealer != ''">
            AND t.appealer = #{obj.appealer}
        </if>
        <if test="obj.status != null">
            AND t.status = #{obj.status}
        </if>
        <if test="obj.isLast != null">
            AND t.is_last = #{obj.isLast}
        </if>
		AND t.atv_flag = 1
    	AND t.tenant_id = #{obj.tenantId}
	</sql>
	
	<select id="listByPage" parameterType="java.util.HashMap"
		resultType="com.kim.quality.business.entity.AppealEntity">
		select 
			<include refid="selectColumn"/>
		from icm_qt_appeal as t
		<where>
			<include refid="queryCondition"/>
		</where>
		<if test="page.orderBy != null and page.orderBy != ''">
			order by ${page.orderBy} ${page.orderType} 
		</if>
		limit #{page.offset},#{page.rows}
	</select>
	
	<!-- <select id="listByPageCount" parameterType="java.util.HashMap" resultType="int">
		select 
			count(1) as count
		from icm_qt_appeal as t
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<include refid="queryCondition"/>
		</trim>
	</select> -->
	
	<select id="find" parameterType="com.kim.quality.business.vo.AppealVo"
		resultType="com.kim.quality.business.entity.AppealEntity">
		select 
			<include refid="selectColumn"/>
		from icm_qt_appeal as t 
		where t.id=#{id} and t.atv_flag = 1
			AND t.tenant_id = #{tenantId}
		limit 1
	</select>
	
	<sql id="insertField">
			task_id,
			inspector,
			appealer,
			appeal_time,
			content,
			is_last,
			status,
			tenant_id,
			atv_flag,
			oper_time,
			oper_user,
			oper_name,
			remark
	</sql>
		
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.kim.quality.business.entity.AppealEntity">
		insert into icm_qt_appeal(
			<include refid="insertField"></include>
		) values (
            #{taskId},
            #{inspector},
            #{appealer},
            now(),
            #{content},
            #{isLast},
            #{status},
            #{tenantId},
            #{atvFlag},
            now(),
            #{operUser},
            #{operName},
            #{remark}
		)
	</insert>
	
	<!--
	<insert id="insertBatch" parameterType="java.util.List">
		insert into icm_qt_appeal(
			<include refid="insertField"></include>
		) values 
		<foreach collection="list" item="item" separator=",">
		(
            #{item.taskId},
            #{item.inspector},
            #{item.appealer},
            now(),
            #{item.content},
            #{item.isLast},
            #{item.status},
            #{item.tenantId},
            #{item.atvFlag},
            now(),
            #{item.operUser},
            #{item.operName},
            #{item.remark}
		)
		</foreach>
	</insert>
	-->
	
	<update id="update" parameterType="com.kim.quality.business.entity.AppealEntity">
		update icm_qt_appeal 
		<set>
            <if test="status != null">
                status = #{status},
            </if>
            oper_time = now(),
            <if test="operUser != null">
                oper_user = #{operUser},
            </if>
            <if test="operName != null">
                oper_name = #{operName},
            </if>
            <if test="remark != null">
                remark = #{remark},
            </if>
		</set>
		where atv_flag = 1 AND tenant_id = #{tenantId}
		and task_id = #{taskId}
		<if test="id != null and id != ''">
			and id=#{id}
		</if>
		<if test="oldStatus != null">
            and status = #{oldStatus}
        </if>
	</update>
	
	<update id="clearPre" parameterType="com.kim.quality.business.vo.AppealVo">
		update icm_qt_appeal set is_last = ${@com.kim.quality.business.enums.MainTask@ITEM_IS_LAST_N}
		where atv_flag = 1 AND tenant_id = #{tenantId}
			and task_id = #{taskId}
	</update>
	
	<select id="listLast" parameterType="com.kim.quality.business.vo.AppealVo" resultType="String">
		select 
			t.id 
		from icm_qt_appeal as t
		where  t.atv_flag = 1 and t.tenant_id = #{tenantId}
		and t.appeal_time = (
			select max(tt.appeal_time) from icm_qt_appeal as tt 
			where tt.task_id = t.task_id and tt.tenant_id = t.tenant_id and tt.atv_flag = 1
		);
	</select>
	
	<update id="updateLastById" parameterType="com.kim.quality.business.vo.AppealVo">
		update icm_qt_appeal set is_last = #{isLast}
		where atv_flag = 1 AND tenant_id = #{tenantId}
			and id 
			<choose>
				<when test="isIn != null and isIn != '' and isIn == true">
					in 
				</when>
				<otherwise>
					not in 
				</otherwise>
			</choose>
			<foreach collection="idList" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
	</update>
	
</mapper>